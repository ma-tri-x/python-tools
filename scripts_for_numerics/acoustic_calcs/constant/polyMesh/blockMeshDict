/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
 
    root            "";
    case            "";
    instance        "";
    local           "";
 
    class           dictionary;
    object          blockMeshDict;
}
 
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * 2017-12-21 Max Koch acoustic bubble   * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * *wall * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * lT* ______ ________ RT* * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * | * * | rT* * *|* ^ XF* * * * * * * * * * * * * * //
// * * * * * * * * * * * * | C * | * * D *|* | * * * * * * * * * * * * * * * //
// * * * * * * * * * * lt* ------|--------|* ^ Y * * * * * * * * * * * * * * //
// * * * * * * * * * * * * |_* * | * * * *|* | * * * * * * * * * * * * * * * //
// * * * * * * * * *axis * |_) A | * * B *|* | wave-transmissive * * * * * * //
// * * * * * * * * * * * * | * * | rd  * *|* | * Rd  * * * * * * * * * * * * //
// * * * * * * * * * * ld* ------|--------|* ^ Ymin* * * * * * * * * * * * * //
// * * * * * * * * * * * * | F * | * * E *|* | * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * | * * | * * * *|* | * * * * * * * * * * * * * * * //
// * * * * * * * * * * lD* |_____|rD______|* 0 * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * wall* * * * * RD* * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * 0 ->  X ------> XF* * * * * * * * * * * * * * * * //



 



//# define function to get circle point coordinates when having origin in (0 0 0)
//# GCP = getCirclePoint
//# GCPx = R * cos(phi [deg]) * cos(theta [rad]





 


convertToMeters 1;




//# parameters that drive the mesh:
              // distance of bubble center to rigid wall (only for comparison)

                     // bubble domain im (domain B)
              // mesh end (domain C)
      // angular number of cells in B domain




//################### domain A






//################### domain B
//# length of B domain
 
//# grading of B domain
 
//# computing radial number of cells





//################### domain C
//# length of B domain
 
//# grading of B domain
 
//# computing radial number of cells





//################### domain F
//# length of B domain
 
//# grading of B domain
 
//# computing radial number of cells





//################### domain D



//################### domain E



//# l=left,r=right,f=front,b=back,t=top,d=down; Teildom√§nen durchnummeriert von oben nach unten
//# Reihenfolge: domain-nummer-left/right-top/down-front/back
vertices
(

    (                    0              0                     0)      // Vertex lDf = 0 
    (                    0              0                     0)      // Vertex lDb = 1 
                                          
    (0.000299973336888362              0 3.99964449184483e-06)      // Vertex rDf = 2 
    (0.000299973336888362              0 -3.99964449184483e-06)      // Vertex rDb = 3 
    
    (0.0332573942369545              0 0.000443431923159393)      // Vertex RDf = 4 
    (0.0332573942369545              0 -0.000443431923159393)      // Vertex RDb = 5 
    
    (                    0           0.0247302627389                     0)      // Vertex ldf = 6 
    (                    0           0.0247302627389                     0)      // Vertex ldb = 7 
    
    (0.000299973336888362           0.0247302627389 3.99964449184483e-06)      // Vertex rdf = 8 
    (0.000299973336888362           0.0247302627389 -3.99964449184483e-06)      // Vertex rdb = 9 
    
    (0.0332573942369545           0.0247302627389 0.000443431923159393)      // Vertex Rdf = 10 
    (0.0332573942369545           0.0247302627389 -0.000443431923159393)      // Vertex Rdb = 11 
    
    (                    0              0.0251602627389                     0)      // Vertex ltf = 12 
    (                    0              0.0251602627389                     0)      // Vertex ltb = 13 
                                                                              
    (0.000299973336888362              0.0251602627389 3.99964449184483e-06)      // Vertex rtf = 14 
    (0.000299973336888362              0.0251602627389 -3.99964449184483e-06)      // Vertex rtb = 15 
                                                                              
    (0.0332573942369545              0.0251602627389 0.000443431923159393)      // Vertex Rtf = 16 
    (0.0332573942369545              0.0251602627389 -0.000443431923159393)      // Vertex Rtb = 17 
    
    (                    0             0.0332603503184                     0)      // Vertex lTf = 18 
    (                    0             0.0332603503184                     0)      // Vertex lTb = 19 

    (0.000299973336888362             0.0332603503184 3.99964449184483e-06)      // Vertex rTf = 20 
    (0.000299973336888362             0.0332603503184 -3.99964449184483e-06)      // Vertex rTb = 21 

    (0.0332573942369545             0.0332603503184 0.000443431923159393)      // Vertex RTf = 22 
    (0.0332573942369545             0.0332603503184 -0.000443431923159393)      // Vertex RTb = 23 
);
 
blocks
(
  hex (6 8 9 7  12 14 15 13)  (38 1 54) simpleGrading (   1 1             1) //# A
  hex (8 10 11 9  14 16 17 15)  (45 1 54) simpleGrading (554.339171973333 1             1) //# B
  hex (12 14 15 13  18 20 21 19)  (38 1 341) simpleGrading (   1 1          6.60969852810331) //# C
  hex (14 16 17 15  20 22 23 21)  (45 1 341) simpleGrading (554.339171973333 1          6.60969852810331) //# D
  hex (2 4 5 3  8 10 11 9)  (45 1 1243) simpleGrading (554.339171973333 1 0.2) //# E
  hex (0 2 3 1  6 8 9 7)  (38 1 1243) simpleGrading (   1 1 0.2) //# F
);


edges                  
(
//   arc B1rdf  B1rtf  (GCPx(XF ,  80., theta) GCPy(XF ,  80.) GCPz(XF ,  80., theta))
//   arc B1rdb  B1rtb  (GCPx(XF ,  80.,-theta) GCPy(XF ,  80.) GCPz(XF ,  80.,-theta))
//                                                       
//   arc B2rdf  B1rdf  (GCPx(XF ,  10., theta) GCPy(XF ,  10.) GCPz(XF ,  10., theta))   
//   arc B2rdb  B1rdb  (GCPx(XF ,  10.,-theta) GCPy(XF ,  10.) GCPz(XF ,  10.,-theta))
);
 
patches
(
     wedge front
     (    
            (0 2 8 6) //# F
            (2 4 10 8) //# E
            (6 8 14 12) //# A
            (8 10 16 14) //# B
            (12 14 20 18) //# C
            (14 16 22 20) //# D
     )     
           
     
     wedge back
     (
            (3 1 7 9) //# F
            (5 3 9 11) //# E
            (9 7 13 15) //# A
            (9 15 17 11) //# B
            (15 13 19 21) //# C
            (17 15 21 23) //# D
     )
     
     //#patch side
     //#(            
     //#)
     
     patch wall
     (            
            
            (2 0 1 3) //# F
            (4 2 3 5) //# E
            
            (18 20 21 19) //# C
            (20 22 23 21) //# D
     )
     
     patch wallside
     (
            (4 5 11 10) //# E
            (10 11 17 16) //# B
            (16 17 23 22) //# D
     )
     
     //#patch wall2
     //#(            
     //#)
     
     empty axis
     (
           (1 0 6 7) //# F
           (7 6 12 13) //# A
           (13 12 18 19) //# C
     )
);   
     

mergePatchPairs
(
);                       

//// cell width at Xi:
//cw_Xi
//// meaning a timestep of...
//calc(0.4*cw_Xi/200)
//// ... for 200 m/s at smallest cell and maxCo=0.4


