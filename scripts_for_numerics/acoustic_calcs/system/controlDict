/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs (
      "libfoam.so"
      "libsimpleSwakFunctionObjects.so"
      "libswakFunctionObjects.so"
      "libgroovyBC.so"
     );

application     localMassCorr_working_opt;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.00016;

deltaT          1e-11;

writeControl    timeStep;
//writeControl    timeStep; adjustableRunTime

// the uncommented line of the below three MUST stand on top!!!!!
writeInterval   100;// every 10th timestep //
// writeInterval   1e-06; 
// for adjustableRunTime: every bla [s] 

purgeWrite      0;

writeFormat     ascii;

writePrecision  8;

writeCompression compressed;

timeFormat      general;

timePrecision   10;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.2;
discardMaxCoBubble false;
maxAlphaCo      0.1;
maxAcousticCo   0.99;
machNoSwitchToAcousticCo   0.0;
critAcousticCo  10000.0;

maxDeltaT       1e-06;
maxU        10000;

printInfos true;


functions
{
//     probes
//     {
//         type            probes;
//         functionObjectLibs ("libsampling.so");
//         outputControl   timeStep;
//         outputInterval  1;
//         probeLocations
//         (
//             ( 0.0000001 0 0 )
//             ( 0.003 0 0 )
//         );
//         fields
//         (
//             p_rgh
//             U
//         );
//     }

//    volumeMinMax
//    {
//       type volumeMinMax;
//      functionObjectLibs
//        (
//          "libsimpleFunctionObjects.so"
//        );
//      verbose true;
//      outputControlMode   timeStep;
//      outputInterval  1;
//      fields
//        (
//          Mach
//        );
//    }

//     extremeP {
//      type  swakExpression;
//      valueType  set;
//      verbose  true;
//      outputControlMode timeStep;
//      outputInterval  1;
//      setName  lineY1;
//      set {
//        type  midPoint;
//        axis y ;
//        start (2.5e-06 -0.0249452627389 0) ;   // -distReplace: y-Koordinate der Wand
//        end ( 2.5e-06   0.0002   0) ;  //
//      }
//      interpolate  false;
//      interpolationType  cell;
//      expression  "p_rgh";
//      accumulations (min max);
//      }
// 
//      maxPPosition {
//        $extremeP;
//        expression "maxPosition(p_rgh)";
//        accumulations (average);
//      }
// 
//      minPPosition {
//        $extremeP;
//        expression "minPosition(p_rgh)";
//        accumulations (average);
//      }
// 
//    extremeUy {
//      type  swakExpression;
//      valueType  set;
//      verbose  true;
//      outputControlMode timeStep;
//      outputInterval  1;
//      setName  lineY1;
//      variables (
//                  "ydirection=vector(0,1,0);"
//                  "Uy=U & ydirection;"
//         );
//        expression "Uy";
//        accumulations (min max);
//      }
// 
//      maxUyPosition {
//        $extremeUy;
//        expression "maxPosition(Uy)";
//        accumulations (average);
//      }
//      minUyPosition {
//        $extremeUy;
//        expression "minPosition(Uy)";
//        accumulations (average);
//      }
    
   volumeIntegral
   {
      type volumeIntegrate;
     functionObjectLibs
       (
         "libsimpleFunctionObjects.so"
       );
     verbose true;
     outputControlMode   timeStep;
     outputInterval  1;
     fields
       (
            //rho
            rhoBubble
            alpha2
            //p_rgh
       );
   }

}


// ************************************************************************* //
